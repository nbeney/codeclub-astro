---

---

<div id="p5-perlin-field"></div>

<script>
    import p5 from "p5";

    new p5((p) => {
        const N = 20;
        const OCTAVES = 8;
        const FALLOFF = 0.4;
        const REZ = 1 / 100;

        p.setup = function () {
            p.createCanvas(350, 350);
            p.background(0);
            p.noiseSeed(Math.floor(Math.random() * 100));
            p.noiseDetail(OCTAVES, FALLOFF);
        };

        p.draw = function () {
            let t = p.frameCount / 200;
            let w = p.width / (N + 1);
            let h = p.height / (N + 1);

            p.colorMode(p.RGB);
            p.background(0);
            p.colorMode(p.HSB, 360, 100, 100);
            for (let c = 1; c <= N; c++) {
                let x = c * w;
                for (let r = 1; r <= N; r++) {
                    let y = r * h;
                    let n = p.noise(x * REZ, y * REZ, t);
                    n = p.map(n, 0.25, 0.75, 0, 1);
                    n = p.constrain(n, 0, 1);
                    let angle = p.map(n, 0, 1, 0, p.TWO_PI);
                    let hue = p.degrees(angle);

                    p.push();
                    p.translate(x, y);
                    p.rotate(angle);
                    p.fill(hue, 100, 100);
                    p.noStroke();
                    p.triangle(7, 0, -7, -4, -7, 4);
                    p.pop();
                }
            }
        };

        p.mousePressed = function () {
            p.noiseSeed(Math.floor(Math.random() * 100));
        };
    }, "p5-perlin-field");
</script>

<!-- 
from p5 import *
from random import randint

N = 20

OCTAVES = 8
FALLOFF = 0.4
REZ = 1/100

def setup():
    size(350, 350)
    background(0)
    noise_seed(randint(0, 100))
    noise_detail(OCTAVES, FALLOFF)

def draw():
    t = frame_count / 200
    w = width / (N + 1)
    h = height / (N + 1)
    
    color_mode(RGB)
    background(0)
    color_mode(HSB, 360, 100, 100)
    for c in range(1, N+1):
        x = c * w 
        for r in range(1, N+1):
            y = r * h
            n = noise(x * REZ, y * REZ, t)
            n = map(n, 0.25, 0.75, 0, 1)
            n = constrain(n, 0, 1)
            angle = map(n, 0, 1, 0, TWO_PI)
            hue = degrees(angle)
            
            push_matrix()
            translate(x, y)
            rotate(angle)
            fill(hue, 100, 100)
            no_stroke()
            triangle(7, 0, -7, -4, -7, 4)
            pop_matrix()

def mouse_pressed():
    noise_seed(randint(0, 100))

run()
-->
