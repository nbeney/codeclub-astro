---

---

<div id="p5-firework"></div>

<script>
    import p5 from 'p5';
    
    new p5((p) => {
        const NUM = 15;
        const RADIUS = 50;
        const acc = p.createVector(0, 0.02);

        let fireworks = [];

        function colorGenerator() {
            const N = 12;
            let count = 0;
            return () => {
                const hue = (count * 360) / N;
                count = (count + 1) % N;
                return hue;
            };
        }

        const genColor = colorGenerator();

        p.setup = function () {
            p.createCanvas(400, 400);
            p.background(0);
        };

        p.draw = function () {
            p.background(0, 60);

            for (let f of fireworks) {
                f.update();
                f.display();
            }

            for (let i = fireworks.length - 1; i >= 0; i--) {
                if (!fireworks[i].alive()) {
                    fireworks.splice(i, 1);
                }
            }

            for (let _ = 0; _ < NUM - fireworks.length; _++) {
                const r = 3;
                fireworks.push(
                    new Firework(
                        p.createVector(
                            p.random(10, p.width - 10),
                            p.height + r,
                        ),
                        p.createVector(
                            p.randomGaussian(-0.1, 0.1),
                            -4 * p.random(0.6, 1),
                        ),
                        acc,
                        genColor(),
                        r,
                    ),
                );
            }

            const count = fireworks.reduce(
                (acc, f) => acc + f.particles.length,
                0,
            );
            p.fill(255);
            p.text(count, 10, 20);
        };

        class Firework {
            constructor(pos, vel, acc, hue = 0, radius = 25) {
                this.hasExploded = false;
                this.particles = [new Particle(pos, vel, acc, hue, radius)];
            }

            update() {
                if (!this.hasExploded) {
                    const part = this.particles[0];
                    if (part.vel.y > 0) {
                        this.hasExploded = true;
                        this.particles.shift();
                        const N = 50;
                        for (let _ = 0; _ < N; _++) {
                            // const pos = part.pos.copy();
                            const pos = p.createVector(part.pos.x, part.pos.y);
                            const s = p.random(0.4, 0.6);
                            const vel = p.createVector(
                                s * p.cos((_ * p.TWO_PI) / N),
                                s * p.sin((_ * p.TWO_PI) / N),
                            );
                            this.particles.push(
                                new Particle(
                                    pos,
                                    vel,
                                    part.acc,
                                    part.hue,
                                    part.radius,
                                ),
                            );
                        }
                    }
                }

                for (let part of this.particles) {
                    part.update();
                }

                for (let i = this.particles.length - 1; i >= 0; i--) {
                    if (!this.particles[i].alive()) {
                        this.particles.splice(i, 1);
                    }
                }
            }

            display() {
                if (!this.particles.length) {
                    return;
                }

                p.push();
                p.colorMode(p.HSB);
                p.fill(this.particles[0].hue, 100, 100, 0.5);
                for (let part of this.particles) {
                    part.display();
                }
                p.pop();
            }

            alive() {
                return (
                    this.particles.length &&
                    this.particles.every((p) => p.alive())
                );
            }
        }

        class Particle {
            constructor(pos, vel, acc, hue = 0, radius = 25) {
                this.pos = pos.copy();
                this.vel = vel.copy();
                this.acc = acc.copy();
                this.hue = hue;
                this.radius = radius;
                this.diam = 2 * radius;
            }

            update() {
                this.pos.add(this.vel);
                this.vel.add(this.acc);
            }

            display() {
                p.circle(this.pos.x, this.pos.y, this.diam);
            }

            alive() {
                return (
                    this.pos.x >= -this.radius &&
                    this.pos.x <= p.width + this.radius &&
                    this.pos.y <= p.height + this.radius + 10
                );
            }
        }
    }, "p5-firework");
</script>

<!-- 
from p5 import *
from firework import Firework
from random import randint, uniform, gauss
from vector import Vector

fireworks = []
NUM = 15
RADIUS = 50

acc = Vector(0, 0.02)

def color_generator():
    N = 12
    count = 0
    while True:
        yield count * 360 / N
        count = (count + 1) % N

gen_color = color_generator()

def setup():
    size(400, 400)
    background(0)

def draw():
    background(0, 60)
    
    for f in fireworks:
        f.update()
        f.display()

    for i in range(len(fireworks) - 1, -1, -1):
        f = fireworks[i]
        if not f.alive():
            fireworks.pop(i)

    for _ in range(NUM - len(fireworks)):
        r = 3
        fireworks.append(Firework(
            pos=Vector(randint(10, width - 10), height + r), 
            vel=Vector(gauss(-0.1, 0.1), -4 * uniform(0.6, 1)), 
            acc=acc,
            hue=next(gen_color),
            radius=r))

    count = sum(len(_.particles) for _ in fireworks)
    fill(255)
    text(count, 10, 20)

from p5 import *
from particle import Particle
from vector import Vector
from math import cos, sin
from random import uniform

class Firework:
    def __init__(self, pos, vel, acc, hue=0, radius=25):
        self.has_exploded = False
        self.particles = [Particle(pos, vel, acc, hue, radius)]

    def update(self):
        if not self.has_exploded:
            p = self.particles[0]
            if p.vel.y > 0:
                self.has_exploded = True
                self.particles.pop(0)
                N = 50
                for _ in range(N):
                    pos = p.pos.copy()
                    s = uniform(0.6, 1)
                    vel = Vector(
                        s * cos(_ * TWO_PI / N),
                        s * sin(_ * TWO_PI / N)
                    )
                    self.particles.append(Particle(
                        pos=pos,
                        vel=vel,
                        acc=p.acc,
                        hue=p.hue,
                        radius=p.radius
                    ))

        for p in self.particles:
            p.update()
            
        for i in range(len(self.particles) - 1, -1, -1):
            p = self.particles[i]
            if not p.alive():
                self.particles.pop(i)

    def display(self):
        if not self.particles:
            return
            
        push_style()
        color_mode(HSB)
        fill(self.particles[0].hue, 100, 100, 0.5)
        for p in self.particles:
            p.display()
        pop_style()

    def alive(self):
        return self.particles and all(_.alive() for _ in self.particles)

from p5 import *
from vector import Vector

def id_generator():
    id = 0
    while True:
        id += 1
        yield id

id_gen = id_generator()

class Particle:
    def __init__(self, pos, vel, acc, hue=0, radius=25):
        global counter
        self.pos = pos
        self.vel = vel
        self.acc = acc
        self.hue = hue
        self.radius = radius
        self.diam = 2 * radius
        self.id = next(id_gen)

    def __repr__(self):
        return f"#{self.id} {self.pos}"

    def update(self):
        self.pos.add(self.vel)
        self.vel.add(self.acc)

    def display(self):
        circle(self.pos.x, self.pos.y, self.diam)

    def alive(self):
        return (
            self.pos.x >= -self.radius and 
            self.pos.x <= width + self.radius and 
            self.pos.y <= height + self.radius + 10
        )

from p5 import *
from math import sqrt, cos, sin
from random import uniform

class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return f"V({self.x}, {self.y})"

    def copy(self):
        return Vector(self.x, self.y)

    def add(self, other):
        self.x += other.x
        self.y += other.y

    def subtract(self, other):
        self.x -= other.x
        self.y -= other.y

    def mult(self, number):
        self.x *= number
        self.y *= number

    def mag(self):
        return sqrt(self.x ** 2 + self.y ** 2)

    @staticmethod
    def random():
        a = uniform(0, TWO_PI)
        return Vector(cos(a), sin(a))
        
if __name__ == "__main__":
    v1 = Vector(3, 4)
    print(v1, v1.mag())
    
    v2 = v1.copy()
    v2.mult(2)
    print(v2, v2.mag())
    
    v3 = v1.copy()
    v3.add(Vector(2, 1))
    print(v3, v3.mag())
    
    v4 = v1.copy()
    v4.subtract(Vector(4, 3))
    print(v4, v4.mag())
    
    for _ in range(5):
        v5 = Vector.random()
        print(v5, v5.mag())

run()
-->
